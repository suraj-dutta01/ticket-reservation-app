package org.jsp.reservationapi.service;

import java.util.Optional;

import org.jsp.reservationapi.dao.AdminDao;
import org.jsp.reservationapi.dao.BusDao;
import org.jsp.reservationapi.dto.BusRequest;
import org.jsp.reservationapi.dto.ResponseStructure;
import org.jsp.reservationapi.exceptions.AdminNotFoundException;
import org.jsp.reservationapi.exceptions.BusNotFoundException;
import org.jsp.reservationapi.model.Admin;
import org.jsp.reservationapi.model.Bus;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

@Service
public class BusService {
	@Autowired
	private BusDao busDao;
	@Autowired
	private AdminDao adminDao;
	public ResponseEntity<ResponseStructure<Bus>> saveBus(BusRequest busRequest,int admin_id){
		ResponseStructure<Bus> structure=new ResponseStructure<>();
		Optional<Admin> resAdmin=adminDao.findById(admin_id);
		if(resAdmin.isPresent()) {
			Bus bus=busDao.saveBus(mapToBus(busRequest));
			structure.setMessage("Bus Saved");
			structure.setStatusCode(HttpStatus.CREATED.value());
	        Admin admin=resAdmin.get();
	        admin.getBusses().add(bus);
			structure.setData(bus);
			return ResponseEntity.status(HttpStatus.CREATED).body(structure);
		}
		throw new AdminNotFoundException("Bus is Not save As Admin id is invalid");	
	}
	public ResponseEntity<ResponseStructure<Bus>> updateBus(BusRequest busRequest,int bus_id){
		ResponseStructure<Bus> structure=new ResponseStructure<>();
		Optional<Bus> resBus=busDao.findBusById(bus_id);
		if(resBus.isPresent()) {
			Bus dbBus=mapToBus(busRequest);
			dbBus.setId(bus_id);
			structure.setMessage("Bus is Updated");
			structure.setData(busDao.saveBus(dbBus));
			structure.setStatusCode(HttpStatus.ACCEPTED.value());
			return ResponseEntity.status(HttpStatus.ACCEPTED).body(structure);
		}
		throw new BusNotFoundException("Bus is not found as id is invalid");	
	}
	
	public Bus mapToBus(BusRequest busRequest) {
		return Bus.builder().name(busRequest.getName()).bus_number(busRequest.getBus_number())
				.number_of_seats(busRequest.getNumber_of_seats()).from_location(busRequest.getFrom_location())
				.to_location(busRequest.getTo_location()).date_of_departure(busRequest.getDate_of_departure()).build();
	}

}
